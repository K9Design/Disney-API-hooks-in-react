{"version":3,"sources":["components/Header.js","hooks/FavouriteContext.js","components/Character.js","components/CharacterContainer.js","components/Navigation.js","App.js","reportWebVitals.js","index.js"],"names":["Header","currentPage","className","FavouriteContext","React","createContext","useFavourites","useContext","favourites","FavouriteProvider","children","useState","setFavourites","Provider","value","toggleFavouriteForCharacter","characterId","includes","updatedFavourites","filter","id","Character","character","faves","toggleFaves","imageSrc","imageUrl","substring","indexOf","name","onClick","_id","src","alt","CharacterContainer","characters","rows","cols","forEach","index","push","length","buildRows","Navigation","setCurrentPage","setToggleShowFavs","showFavsMode","App","setCharacters","showFavs","setShowFavs","useEffect","getFavourites","getCharacters","pageNumber","a","axios","get","apiResponse","data","favesArray","dataCollection","characterData","show","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eafcc3c7.chunk.js","sourcesContent":["function Header({ currentPage }) {\n  return (\n    <header className=\"header__container\">\n      <h1 className=\"header__title\">The World of Disney</h1>\n      <p className=\"header__page-count \">Page: {currentPage}</p>\n    </header>\n  )\n}\n\nexport default Header","import React, { useContext, useState } from 'react'\n\nconst FavouriteContext = React.createContext();\n\nexport function useFavourites() {\n  return useContext(FavouriteContext).favourites;\n}\nexport function useToggleFavourites() {\n  return useContext(FavouriteContext).toggleFavouriteForCharacter;\n}\n\nexport function FavouriteProvider({ children }) {\n  const [favourites, setFavourites] = useState([]);\n\n  function toggleFavouriteForCharacter(characterId) {\n    if (!favourites.includes(characterId)) {\n      // add to favourites\n      setFavourites([...favourites, characterId]);\n    }\n    else {\n      // remove from favourites\n      const updatedFavourites = favourites.filter((id) => id !== characterId);\n      setFavourites(updatedFavourites);\n    }\n  }\n\n  return (\n    <FavouriteContext.Provider value={{ favourites, toggleFavouriteForCharacter }}>\n      {children}\n    </FavouriteContext.Provider>\n  )\n\n\n}","import React from 'react';\nimport { useFavourites, useToggleFavourites } from '../hooks/FavouriteContext';\n\nfunction Character({ character }) {\n\n  const faves = useFavourites();\n  const toggleFaves = useToggleFavourites();\n\n  // Define a default in case the character doesn't have an image\n  let imageSrc = \"https://picsum.photos/300/200/?blur\";\n  if (character.imageUrl) {\n    // API seems to include extra path for images so here we strip it off to fetch raw image\n    imageSrc = character.imageUrl.substring(0, character.imageUrl.indexOf('/revision'));\n  }\n\n\n\n\n  return (\n    <article className=\"character-item\">\n\n      <h2>{character.name}</h2>\n\n      <div className=\"character-item__actions\" onClick={() => toggleFaves(character._id)}>\n        {!faves.includes(character._id) ? \"Add to Favourites\" : \"Favourited\"}\n      </div>\n\n      <img className=\"character-item__img\" src={imageSrc} alt={character.name} />\n\n    </article>\n  )\n}\n\nexport default Character","import Character from './Character';\n\nfunction CharacterContainer({ characters }) {\n\n    const buildRows = () => {\n        let rows = [], cols = [];\n        characters.forEach((character, index) => {\n            cols.push(\n                <Character key={character._id}\n                    character={character}\n                //updateFavourites={updateFavourites}\n                />\n            );\n            if ((index + 1) % 5 === 0) {\n                rows.push(\n                    <div className=\"character-row\" key={index}>\n                        {cols}\n                    </div>\n                )\n                cols = []\n            }\n        });\n\n        // Final remaining cols \n        if (cols.length > 0) {\n            rows.push(\n                <div className=\"character-row\" key={characters.length}>\n                    {cols}\n                </div>\n            )\n        }\n\n        return rows;\n    }\n\n    return (\n        <div className=\"character-container\">\n            {buildRows()}\n        </div>\n    )\n}\n\nexport default CharacterContainer","function Navigation({ currentPage, setCurrentPage, setToggleShowFavs, showFavsMode }) {\n\n    const nextPage = () => {\n        const newPageNumber = currentPage + 1;\n        setCurrentPage(newPageNumber);\n    }\n\n    const prevPage = () => {\n        if (currentPage > 1) {\n            const newPageNumber = currentPage - 1;\n            setCurrentPage(newPageNumber);\n        }\n    }\n\n    const showFavs = () => {\n        setToggleShowFavs();\n    }\n\n    return (\n        <div className=\"navigation\">\n            <div className=\"navigation__item\">\n                <button className=\"navigation__button\" onClick={prevPage}>Prev Page</button>\n            </div>\n            <div className=\"navigation__item\">\n                <button className=\"navigation__button\" onClick={showFavs}>{!showFavsMode ? \"Show Favourites\" : \"Show All\"}</button>\n            </div>\n            <div className=\"navigation__item\">\n                <button className=\"navigation__button\" onClick={nextPage}>Next Page</button>\n            </div>\n        </div>\n\n    )\n}\n\nexport default Navigation","\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport CharacterContainer from './components/CharacterContainer';\nimport Navigation from './components/Navigation';\nimport axios from 'axios';\n\nimport { useFavourites } from './hooks/FavouriteContext';\n\n\nfunction App() {\n\n  // Some dummy state representing disney characters\n  const [characters, setCharacters] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [showFavs, setShowFavs] = useState(false);\n  const faves = useFavourites();\n\n  const setToggleShowFavs = () => {\n    setCurrentPage(1);\n    setShowFavs(show => !show);\n  }\n\n  useEffect(() => {\n    showFavs ? getFavourites(faves) : getCharacters(currentPage);\n  }, [currentPage, showFavs, faves]);\n\n  const getCharacters = async (pageNumber) => {\n    // Utilised Axios for API calls\n    const apiResponse = await axios.get(`https://api.disneyapi.dev/characters?page=${pageNumber}`);\n    setCharacters(apiResponse.data.data);\n  };\n\n  const getFavourites = async (favesArray) => {\n    // Utilised Axios for API calls\n    const dataCollection = [];\n    for (const id of favesArray) {\n      const characterData = await axios.get(`https://api.disneyapi.dev/characters/` + id);\n      dataCollection.push(characterData.data);\n    }\n    setCharacters(dataCollection);\n  };\n\n  return (\n    <div className=\"page\">\n      <Header currentPage={currentPage} />\n      <Navigation currentPage={currentPage} setCurrentPage={setCurrentPage} setToggleShowFavs={setToggleShowFavs} showFavsMode={showFavs} />\n      <CharacterContainer characters={characters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { FavouriteProvider } from './hooks/FavouriteContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FavouriteProvider>\n      <App />\n    </FavouriteProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}